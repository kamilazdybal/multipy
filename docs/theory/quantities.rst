###################################################
Quantities
###################################################

This part of the documentation presents notations for all ``multipy`` quantities.

--------------------------------------------------------------------------------

**************************************
Composition
**************************************

Species mole fractions
======================

+----------------------+---------------+-----------------------------------------+----------------------------+--------------------------------+
| Notation             | Unit          | Code                                    | Type                       | Shape                          |
+======================+===============+=========================================+============================+================================+
| :math:`\mathbf{X}_i` | :math:`[-]`   | ``Composition.species_mole_fractions``  | scalar ``numpy.ndarray``   | ``(n_species,n_observations)`` |
+----------------------+---------------+-----------------------------------------+----------------------------+--------------------------------+

.. math::

  \mathbf{X}_i =
  \begin{bmatrix}
  \cdots & X_1 & \cdots \\
  \cdots & X_2 & \cdots \\
   & \vdots & \\
  \cdots & X_n & \cdots \\
  \end{bmatrix}

Species mole fractions gradients
-----------------------------------

+-----------------------------+---------------+----------------------------------------------+----------------------------+--------------------------------+
| Notation                    | Unit          | Code                                         | Type                       | Shape                          |
+=============================+===============+==============================================+============================+================================+
| :math:`\nabla \mathbf{X}_i` | :math:`[-]`   | ``Composition.grad_species_mole_fractions``  | vector ``numpy.ndarray``   | ``(n_species,n_observations)`` |
+-----------------------------+---------------+----------------------------------------------+----------------------------+--------------------------------+

.. math::

  \nabla \mathbf{X}_i =
  \begin{bmatrix}
  \cdots & \nabla X_1 & \cdots \\
  \cdots & \nabla X_2 & \cdots \\
   & \vdots & \\
  \cdots & \nabla X_n & \cdots \\
  \end{bmatrix}

Species mass fractions
======================

+----------------------+---------------+-----------------------------------------+----------------------------+--------------------------------+
| Notation             | Unit          | Code                                    | Type                       | Shape                          |
+======================+===============+=========================================+============================+================================+
| :math:`\mathbf{Y}_i` | :math:`[-]`   | ``Composition.species_mass_fractions``  | scalar ``numpy.ndarray``   | ``(n_species,n_observations)`` |
+----------------------+---------------+-----------------------------------------+----------------------------+--------------------------------+

.. math::

  \mathbf{Y}_i =
  \begin{bmatrix}
  \cdots & Y_1 & \cdots \\
  \cdots & Y_2 & \cdots \\
   & \vdots & \\
  \cdots & Y_n & \cdots \\
  \end{bmatrix}

Species mass fractions gradients
-----------------------------------

+-----------------------------+---------------+----------------------------------------------+----------------------------+--------------------------------+
| Notation                    | Unit          | Code                                         | Type                       | Shape                          |
+=============================+===============+==============================================+============================+================================+
| :math:`\nabla \mathbf{Y}_i` | :math:`[-]`   | ``Composition.grad_species_mass_fractions``  | vector ``numpy.ndarray``   | ``(n_species,n_observations)`` |
+-----------------------------+---------------+----------------------------------------------+----------------------------+--------------------------------+

.. math::

  \nabla \mathbf{Y}_i =
  \begin{bmatrix}
  \cdots & \nabla Y_1 & \cdots \\
  \cdots & \nabla Y_2 & \cdots \\
   & \vdots & \\
  \cdots & \nabla Y_n & \cdots \\
  \end{bmatrix}

Species volume fractions
========================

+----------------------+---------------+-------------------------------------------+----------------------------+--------------------------------+
| Notation             | Unit          | Code                                      | Type                       | Shape                          |
+======================+===============+===========================================+============================+================================+
| :math:`\mathbf{V}_i` | :math:`[-]`   | ``Composition.species_volume_fractions``  | scalar ``numpy.ndarray``   | ``(n_species,n_observations)`` |
+----------------------+---------------+-------------------------------------------+----------------------------+--------------------------------+

.. math::

  \mathbf{V}_i =
  \begin{bmatrix}
  \cdots & V_1 & \cdots \\
  \cdots & V_2 & \cdots \\
   & \vdots & \\
  \cdots & V_n & \cdots \\
  \end{bmatrix}

Species volume fractions gradients
-----------------------------------

+-----------------------------+---------------+------------------------------------------------+----------------------------+--------------------------------+
| Notation                    | Unit          | Code                                           | Type                       | Shape                          |
+=============================+===============+================================================+============================+================================+
| :math:`\nabla \mathbf{V}_i` | :math:`[-]`   | ``Composition.grad_species_volume_fractions``  | vector ``numpy.ndarray``   | ``(n_species,n_observations)`` |
+-----------------------------+---------------+------------------------------------------------+----------------------------+--------------------------------+

.. math::

  \nabla \mathbf{V}_i =
  \begin{bmatrix}
  \cdots & \nabla V_1 & \cdots \\
  \cdots & \nabla V_2 & \cdots \\
   & \vdots & \\
  \cdots & \nabla V_n & \cdots \\
  \end{bmatrix}

Species molar densities
=======================

+-------------------------+--------------------+-----------------------------------------+----------------------------+--------------------------------+
| Notation                | Unit               | Code                                    | Type                       | Shape                          |
+=========================+====================+=========================================+============================+================================+
| :math:`\mathbf{c}_i`    | :math:`[mole/m^3]` | ``Composition.species_molar_densities`` | scalar ``numpy.ndarray``   | ``(n_species,n_observations)`` |
+-------------------------+--------------------+-----------------------------------------+----------------------------+--------------------------------+

.. math::

  \mathbf{c}_i =
  \begin{bmatrix}
  \cdots & c_1 & \cdots \\
  \cdots & c_2 & \cdots \\
   & \vdots & \\
  \cdots & c_n & \cdots \\
  \end{bmatrix}

Species mass densities
=======================

+------------------------+--------------------+-----------------------------------------+----------------------------+--------------------------------+
| Notation               | Unit               | Code                                    | Type                       | Shape                          |
+========================+====================+=========================================+============================+================================+
| :math:`\pmb{\rho}_i`   | :math:`[kg/m^3]`   | ``Composition.species_mass_densities``  | scalar ``numpy.ndarray``   | ``(n_species,n_observations)`` |
+------------------------+--------------------+-----------------------------------------+----------------------------+--------------------------------+

.. math::

  \pmb{\rho}_i =
  \begin{bmatrix}
  \cdots & \rho_1 & \cdots \\
  \cdots & \rho_2 & \cdots \\
   & \vdots & \\
  \cdots & \rho_n & \cdots \\
  \end{bmatrix}

Species molar masses
=======================

+------------------------+--------------------+-----------------------------------------+----------------------------+--------------------------------+
| Notation               | Unit               | Code                                    | Type                       | Shape                          |
+========================+====================+=========================================+============================+================================+
| :math:`\pmb{M}_i`      | :math:`[kg/mole]`  | ``Composition.species_molar_masses``    | scalar ``numpy.ndarray``   | ``(n_species,1)``              |
+------------------------+--------------------+-----------------------------------------+----------------------------+--------------------------------+

.. math::

  \pmb{M}_i =
  \begin{bmatrix}
   M_1  \\
   M_2  \\
   \vdots \\
   M_n  \\
  \end{bmatrix}

Species molar production rates
==============================

+------------------------+-----------------------+----------------------------------------------------+----------------------------+--------------------------------+
| Notation               | Unit                  | Code                                               | Type                       | Shape                          |
+========================+=======================+====================================================+============================+================================+
| :math:`\mathbf{s}_i`   | :math:`[mole/(m^3s)]` | ``Composition.get_species_molar_production_rates`` | scalar ``numpy.ndarray``   | ``(n_species,n_observations)`` |
+------------------------+-----------------------+----------------------------------------------------+----------------------------+--------------------------------+

.. math::

  \mathbf{s}_i =
  \begin{bmatrix}
  \cdots & s_1 & \cdots \\
  \cdots & s_2 & \cdots \\
   & \vdots & \\
  \cdots & s_n & \cdots \\
  \end{bmatrix}

Species mass production rates
=============================

+-----------------------------+-----------------------+----------------------------------------------------+----------------------------+--------------------------------+
| Notation                    | Unit                  | Code                                               | Type                       | Shape                          |
+=============================+=======================+====================================================+============================+================================+
| :math:`\pmb{\omega}_i`      | :math:`[kg/(m^3s)]`   | ``Composition.get_species_mass_production_rates``  | scalar ``numpy.ndarray``   | ``(n_species,n_observations)`` |
+-----------------------------+-----------------------+----------------------------------------------------+----------------------------+--------------------------------+

.. math::

  \pmb{\omega}_i =
  \begin{bmatrix}
  \cdots & \omega_1 & \cdots \\
  \cdots & \omega_2 & \cdots \\
   & \vdots & \\
  \cdots & \omega_n & \cdots \\
  \end{bmatrix}

Mixture molar density
=====================

+-------------+--------------------+----------------------------------------+--------------------+---------+
| Notation    | Unit               | Code                                   | Type               | Shape   |
+=============+====================+========================================+====================+=========+
| :math:`c`   | :math:`[mole/m^3]` | ``Composition.mixture_molar_density``  | scalar ``float``   | N/A     |
+-------------+--------------------+----------------------------------------+--------------------+---------+

Mixture molar volume
=====================

+-------------------+--------------------+----------------------------------------+--------------------+---------+
| Notation          | Unit               | Code                                   | Type               | Shape   |
+===================+====================+========================================+====================+=========+
| :math:`\bar{V}`   | :math:`[m^3/mole]` | ``Composition.mixture_molar_volume``   | scalar ``float``   | N/A     |
+-------------------+--------------------+----------------------------------------+--------------------+---------+

Mixture mass density
====================

+----------------------+--------------------+----------------------------------------+----------------------------+------------------------+
| Notation             | Unit               | Code                                   | Type                       | Shape                  |
+======================+====================+========================================+============================+========================+
| :math:`\pmb{\rho}`   | :math:`[kg/m^3]`   | ``Composition.mixture_mass_density``   | scalar ``numpy.ndarray``   | ``(1,n_observations)`` |
+----------------------+--------------------+----------------------------------------+----------------------------+------------------------+

.. math::

  \pmb{\rho} =
  \begin{bmatrix}
  \cdots & \rho & \cdots \\
  \end{bmatrix}

Mixture molar mass
====================

+----------------------+--------------------+----------------------------------------+----------------------------+------------------------+
| Notation             | Unit               | Code                                   | Type                       | Shape                  |
+======================+====================+========================================+============================+========================+
| :math:`\pmb{M}`      | :math:`[kg/mole]`  | ``Composition.mixture_molar_mass``     | scalar ``numpy.ndarray``   | ``(1,n_observations)`` |
+----------------------+--------------------+----------------------------------------+----------------------------+------------------------+

.. math::

  \pmb{M} =
  \begin{bmatrix}
  \cdots & M & \cdots \\
  \end{bmatrix}

--------------------------------------------------------------------------------

**************************************
Velocity
**************************************

Species velocities
======================

+----------------------+---------------+--------------------------------------+----------------------------+--------------------------------+
| Notation             | Unit          | Code                                 | Type                       | Shape                          |
+======================+===============+======================================+============================+================================+
| :math:`\mathbf{u}_i` | :math:`[m/s]` | ``Velocity.species_velocities``      | vector ``numpy.ndarray``   | ``(n_species,n_observations)`` |
+----------------------+---------------+--------------------------------------+----------------------------+--------------------------------+

.. math::

  \mathbf{u}_i =
  \begin{bmatrix}
  \cdots & \mathbf{u}_1 & \cdots \\
  \cdots & \mathbf{u}_2 & \cdots \\
   & \vdots & \\
  \cdots & \mathbf{u}_n & \cdots \\
  \end{bmatrix}

Molar-averaged mixture velocity
===============================

+----------------------+---------------+--------------------------------------+----------------------------+------------------------+
| Notation             | Unit          | Code                                 | Type                       | Shape                  |
+======================+===============+======================================+============================+========================+
| :math:`\mathbf{u}`   | :math:`[m/s]` | ``Velocity.molar_averaged``          | vector ``numpy.ndarray``   | ``(1,n_observations)`` |
+----------------------+---------------+--------------------------------------+----------------------------+------------------------+

.. math::

  \mathbf{u} =
  \begin{bmatrix}
  \cdots & \mathbf{u} & \cdots \\
  \end{bmatrix}

Mass-averaged mixture velocity
===============================

+----------------------+---------------+--------------------------------------+----------------------------+------------------------+
| Notation             | Unit          | Code                                 | Type                       | Shape                  |
+======================+===============+======================================+============================+========================+
| :math:`\mathbf{v}`   | :math:`[m/s]` | ``Velocity.mass_averaged``           | vector ``numpy.ndarray``   | ``(1,n_observations)`` |
+----------------------+---------------+--------------------------------------+----------------------------+------------------------+

.. math::

  \mathbf{v} =
  \begin{bmatrix}
  \cdots & \mathbf{v} & \cdots \\
  \end{bmatrix}

Volume-averaged mixture velocity
================================

+----------------------+---------------+--------------------------------------+----------------------------+------------------------+
| Notation             | Unit          | Code                                 | Type                       | Shape                  |
+======================+===============+======================================+============================+========================+
| :math:`\mathbf{u}^V` | :math:`[m/s]` | ``Velocity.volume_averaged``         | vector ``numpy.ndarray``   | ``(1,n_observations)`` |
+----------------------+---------------+--------------------------------------+----------------------------+------------------------+

.. math::

  \mathbf{u}^V =
  \begin{bmatrix}
  \cdots & \mathbf{u}^V & \cdots \\
  \end{bmatrix}

Arbitrarily-averaged mixture velocity
=====================================

+----------------------+---------------+--------------------------------------+----------------------------+------------------------+
| Notation             | Unit          | Code                                 | Type                       | Shape                  |
+======================+===============+======================================+============================+========================+
| :math:`\mathbf{u}^a` | :math:`[m/s]` | ``Velocity.arbitrarily_averaged``    | vector ``numpy.ndarray``   | ``(1,n_observations)`` |
+----------------------+---------------+--------------------------------------+----------------------------+------------------------+

.. math::

  \mathbf{u}^a =
  \begin{bmatrix}
  \cdots & \mathbf{u}^a & \cdots \\
  \end{bmatrix}

--------------------------------------------------------------------------------

**************************************
Flux
**************************************

Total molar flux
================

+----------------------+------------------------+------------------------------------------+----------------------------+---------------------------------+
| Notation             | Unit                   | Code                                     | Type                       | Shape                           |
+======================+========================+==========================================+============================+=================================+
| :math:`\mathbf{N}_i` | :math:`[mole/(m^2 s)]` | ``Flux.total_molar_flux``                | vector ``numpy.ndarray``   | ``(n_species,n_observations)``  |
+----------------------+------------------------+------------------------------------------+----------------------------+---------------------------------+

.. math::

  \mathbf{N}_i =
  \begin{bmatrix}
  \cdots & \mathbf{N}_1 & \cdots \\
  \cdots & \mathbf{N}_2 & \cdots \\
   & \vdots & \\
  \cdots & \mathbf{N}_n & \cdots \\
  \end{bmatrix}

Total mass flux
===============

+----------------------+------------------------+------------------------------------------+----------------------------+---------------------------------+
| Notation             | Unit                   | Code                                     | Type                       | Shape                           |
+======================+========================+==========================================+============================+=================================+
| :math:`\mathbf{n}_i` | :math:`[kg/(m^2 s)]`   | ``Flux.total_mass_flux``                 | vector ``numpy.ndarray``   | ``(n_species,n_observations)``  |
+----------------------+------------------------+------------------------------------------+----------------------------+---------------------------------+

.. math::

  \mathbf{n}_i =
  \begin{bmatrix}
  \cdots & \mathbf{n}_1 & \cdots \\
  \cdots & \mathbf{n}_2 & \cdots \\
   & \vdots & \\
  \cdots & \mathbf{n}_n & \cdots \\
  \end{bmatrix}

Molar diffusive flux relative to a molar-averaged velocity
================================================================

+----------------------+------------------------+------------------------------------------+----------------------------+---------------------------------+
| Notation             | Unit                   | Code                                     | Type                       | Shape                           |
+======================+========================+==========================================+============================+=================================+
| :math:`\mathbf{J}_i` | :math:`[mole/(m^2 s)]` | ``Flux.diffusive_molar_molar``           | vector ``numpy.ndarray``   | ``(n_species,n_observations)``  |
+----------------------+------------------------+------------------------------------------+----------------------------+---------------------------------+
| :math:`\mathbf{J}_i` | :math:`[mole/(m^2 s)]` | ``Diffusion.diffusive_flux_molar_molar`` | vector ``numpy.ndarray``   | ``(n_species,n_observations)``  |
+----------------------+------------------------+------------------------------------------+----------------------------+---------------------------------+

.. math::

  \mathbf{J}_i =
  \begin{bmatrix}
  \cdots & \mathbf{J}_1 & \cdots \\
  \cdots & \mathbf{J}_2 & \cdots \\
   & \vdots & \\
  \cdots & \mathbf{J}_n & \cdots \\
  \end{bmatrix}

Molar diffusive flux relative to a mass-averaged velocity
================================================================

+------------------------+------------------------+------------------------------------------+----------------------------+---------------------------------+
| Notation               | Unit                   | Code                                     | Type                       | Shape                           |
+========================+========================+==========================================+============================+=================================+
| :math:`\mathbf{J}_i^v` | :math:`[mole/(m^2 s)]` | ``Flux.diffusive_molar_mass``            | vector ``numpy.ndarray``   | ``(n_species,n_observations)``  |
+------------------------+------------------------+------------------------------------------+----------------------------+---------------------------------+

.. math::

  \mathbf{J}_i^v =
  \begin{bmatrix}
  \cdots & \mathbf{J}_1^v & \cdots \\
  \cdots & \mathbf{J}_2^v & \cdots \\
   & \vdots & \\
  \cdots & \mathbf{J}_n^v & \cdots \\
  \end{bmatrix}

Mass diffusive flux relative to a molar-averaged velocity
================================================================

+------------------------+------------------------+------------------------------------------+----------------------------+---------------------------------+
| Notation               | Unit                   | Code                                     | Type                       | Shape                           |
+========================+========================+==========================================+============================+=================================+
| :math:`\mathbf{j}_i^u` | :math:`[kg/(m^2 s)]`   | ``Flux.diffusive_mass_molar``            | vector ``numpy.ndarray``   | ``(n_species,n_observations)``  |
+------------------------+------------------------+------------------------------------------+----------------------------+---------------------------------+

.. math::

  \mathbf{j}_i^u =
  \begin{bmatrix}
  \cdots & \mathbf{j}_1^u & \cdots \\
  \cdots & \mathbf{j}_2^u & \cdots \\
   & \vdots & \\
  \cdots & \mathbf{j}_{n}^u & \cdots \\
  \end{bmatrix}

Mass diffusive flux relative to a mass-averaged velocity
================================================================

+------------------------+------------------------+------------------------------------------+----------------------------+---------------------------------+
| Notation               | Unit                   | Code                                     | Type                       | Shape                           |
+========================+========================+==========================================+============================+=================================+
| :math:`\mathbf{j}_i`   | :math:`[kg/(m^2 s)]`   | ``Flux.diffusive_mass_mass``             | vector ``numpy.ndarray``   | ``(n_species,n_observations)``  |
+------------------------+------------------------+------------------------------------------+----------------------------+---------------------------------+
| :math:`\mathbf{j}_i`   | :math:`[kg/(m^2 s)]`   | ``Diffusion.diffusive_flux_mass_mass``   | vector ``numpy.ndarray``   | ``(n_species,n_observations)``  |
+------------------------+------------------------+------------------------------------------+----------------------------+---------------------------------+

.. math::

  \mathbf{j}_i =
  \begin{bmatrix}
  \cdots & \mathbf{j}_1 & \cdots \\
  \cdots & \mathbf{j}_2 & \cdots \\
   & \vdots & \\
  \cdots & \mathbf{j}_{n} & \cdots \\
  \end{bmatrix}

--------------------------------------------------------------------------------

**************************************
Diffusion
**************************************

Binary diffusion coefficients
=============================

+---------------------------+--------------------+--------------------------------------------------+----------------------------+--------------------------------+
| Notation                  | Unit               | Code                                             | Type                       | Shape                          |
+===========================+====================+==================================================+============================+================================+
| :math:`\pmb{\mathcal{D}}` | :math:`[m^2/s]`    | ``Diffusion.get_binary_diffusion_coefficients``  | scalar ``numpy.ndarray``   | ``(n_species,n_species)``      |
+---------------------------+--------------------+--------------------------------------------------+----------------------------+--------------------------------+

.. math::

  \pmb{\mathcal{D}} =
  \begin{bmatrix}
  - & \mathcal{D}_{1,2} & \dots & \mathcal{D}_{1,n} \\
  \mathcal{D}_{2,1} & - & \dots & \mathcal{D}_{2,n} \\
  \vdots & \vdots & \ddots & \vdots \\
  \mathcal{D}_{n,1} & \mathcal{D}_{n,2} & \dots & - \\
  \end{bmatrix}

where :math:`\mathcal{D}_{i,j} = \mathcal{D}_{j,i} \,\,\, \forall_{i \neq j}`.

Molar Fickian diffusion coefficients
=======================================

+----------------------+--------------------+------------------------------------------------------------------------+----------------------------+------------------------------------------------+
| Notation             | Unit               | Code                                                                   | Type                       | Shape                                          |
+======================+====================+========================================================================+============================+================================================+
| :math:`\mathbf{D}`   | :math:`[m^2/s]`    | ``Diffusion.fickian_diffusion_coefficients_molar_molar``               | scalar ``numpy.ndarray``   | ``(n_species-1,n_species-1,n_observations)``   |
+----------------------+--------------------+------------------------------------------------------------------------+----------------------------+------------------------------------------------+

.. math::

  \mathbf{D} =
  \begin{bmatrix}
  D_{1,1} & D_{1,2} & \dots & D_{1,n-1} \\
  D_{2,1} & D_{2,2} & \dots & D_{2,n-1} \\
  \vdots & \vdots & \ddots & \vdots \\
  D_{n-1,1} & D_{n-1,2} & \dots & D_{n-1,n-1} \\
  \end{bmatrix}

where, in general, :math:`D_{i,j} \neq D_{j,i}`
and :math:`D_{i,j} \neq 0 \,\,\, \forall_{i, j}`.
